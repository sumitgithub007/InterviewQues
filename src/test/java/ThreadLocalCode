package tests;

import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;
import utils.DriverFactory;

public class SampleTest {

    @BeforeMethod
    public void setup() {
        DriverFactory.initDriver();
    }

    @Test
    public void testGoogle() {
        DriverFactory.getDriver().get("https://google.com");
        System.out.println("Title: " + DriverFactory.getDriver().getTitle());
    }

    @AfterMethod
    public void teardown() {
        DriverFactory.quitDriver();
    }
}
This ensures each thread gets its own driver, enabling parallel test execution safely.

Using private static ThreadLocal<WebDriver> ensures:

‚úÖ 1. private:
Restricts direct access to ThreadLocal<WebDriver> from other classes.

Forces all access through getDriver()/initDriver() methods ‚Üí ensures encapsulation and safe control.

‚úÖ 2. static:
So there's only one ThreadLocal instance per class (shared across test instances).

But each thread gets its own copy of WebDriver via that ThreadLocal.

üîÅ Result:
Each thread ‚Üí gets its own WebDriver instance,
but all threads share the same ThreadLocal holder (hence static).
